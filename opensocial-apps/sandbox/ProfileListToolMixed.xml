<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="Create a List" author="Eric Meeks">
    <Require feature="opensocial-0.9" />
    <Require feature="pubsub" />
    <Require feature="views" />
    <Require feature="dynamic-height" />
    <Require feature="osapi" />
    <Require feature="rdf" />
  </ModulePrefs>
  <Content type="html" view="canvas, small">
    <![CDATA[<!--HTML-->
    <!DOCTYPE html>
    
	<!-- #includes -->
	<link rel="stylesheet" href="css/gadget.css" type="text/css" media="screen, projection" >
    <script type="text/javascript" src="js/os.js" ></script>
	<script type="text/javascript" src="js/jquery-1.4.4.js"></script>
		
	<style>
    	.tool_title {font-family:Arial,Helvetica; font-size:14px;}
    	.tool_title_orange {font-weight:bold; font-family:Arial,Helvetica; font-size:14px; color:#CA7C29;margin-top:-1px;}
    	.tool_body {font-family:Arial; font-size:12px;}
    	.tool_credit {font-family:Arial; font-size:10px;}
    	.tool_table_cell {font-family:Arial,Helvetica; font-size:12px; padding:0 20px 0 0;}
    	.tool_table_cell_small {font-family:Arial,Helvetica;font-size:11px;}
    	.tool_table_cell_small span a {font-size:11px;}
        .tool_table_cell_small span {font-size:11px;display:inline-block;margin-right: -15px; }
    	.tool_toggle_button {font-size: 13px;padding:0 5px;}  	
    	a, a:visited { color: #0088CC; text-decoration: none; }
    	a:hover { color: #005580; text-decoration: underline; }
	.gadgets-gadget-content { padding: 1px; }
	.gadgets-gadget-title { font-weight: bold; }
    </style>

	<script type="text/javascript">
	
	var g_arrPubSubIDs = [];
	var g_arrOldIDs = [];
      
	// ==============================================================

	function gadgetEventTrack(action, label, value) {
	
		var message = {'action' : action};
		if (label) {message.label = label;}
		if (value) {message.value = value;}
		
		gadgets.pubsub.publish("analytics", message);
	}	
	// ==============================================================
	
	function showHelp() {
	
		var pop = window.open('Create a List Help','','top=200,left=200,width=450,height=340,scrollbars=0,status=0,menubar=0,location=0,resizable=0');
                pop.document.title = "Create a List Help";
		pop.document.write("<html><head></head><body><div style='margin:10px; font-family:Arial; font-size:12px;'>");  
		pop.document.write("Create a list of profiles for export. "
				+ "Here's how:<br><ol>"
				+ "<li>Click the 'Create Now!' button</li>"
				+ "<li>Start compiling a list of profiles for your list. "
				+ "You can add one profile at a time, add a set of search results, "
				+ "or add a set of co-authors.</li>"
				+ "<li>Review your list export email addresses or details</li>");
		pop.document.write("<br><br><center>" 
			+ "<input type = 'button' value = 'Close' onclick = 'window.close();'>" 
			+ "</center>");
		pop.document.write("</body></html>");
	}
	// ==============================================================
	
	function toggleToolState(value) {
		// We always store "On" or "Off" as the state value in the DB, regardless of what the button says
		osapi.appdata.update({'userId': '@viewer', 'appId':'@app', 'data': {'on_off': value} }).execute(function(result) {
			if (result.error) { 
				alert("Error " + result.error.code + " updating application data: " + result.error.message);
			} else {
        // Note from Eric. Actions element is null
				// document.getElementById("actions").style.display="none"; 
				showToolState();
			}
		});
	}
	// ==============================================================
	
	function showToolState() {
	
		// fetch the on/off state
		osapi.appdata.get({'userId':'@viewer', 'appId':'@app', 'fields':['on_off']} )
			.execute(function(result){
				
			// extract and update state
			var state = os.osapi.getViewerFromResult(result).on_off;

			if (state == "On") {
				document.getElementById("button_and_help").style.display = "none";
				document.getElementById("no_button_and_help").style.display = "block";
				// display the action item table and update it
				document.getElementById("actions").style.display="block";
				document.getElementById("add_profiles").innerHTML = "Assessing results...";
				document.getElementById("list_profiles").innerHTML = "Loading profiles...";
				readData(function(){gadgets.pubsub.subscribe("JSONPersonIds", readPubSubIDsAndUpdateActions)});
				gadgets.window.adjustHeight(75);
			}
			else {
				document.getElementById("button_and_help").style.display = "block";
				document.getElementById("no_button_and_help").style.display = "none";
				document.getElementById("actions").style.display="none";
				gadgets.window.adjustHeight(30);	
			}
				
		}); /* end osapi.appdata.get */	
	}
	// ==============================================================		
	
	function showToolVersion(canvasMode) {
		
		if (canvasMode) {
			document.getElementById("extended_functions").style.display = "inline-block";
			document.getElementById("extended_functions").style.padding = "0 0 0 20px";
		}						
    else {
			showToolState();
		}	
	}
	// ==============================================================

	function addProfilesToList() {
						
		// merge the incoming and existing person ID arrays
		// existing array already populated
		var arrMergedIDs = g_arrOldIDs.concat(g_arrPubSubIDs);

		// dedupe the merged person ID array and save it
		var arrUnChunked = dedupeArray(arrMergedIDs);		

		var delta = arrUnChunked.length - g_arrOldIDs.length;
		var total = arrUnChunked.length;

		saveData(arrUnChunked, function() {
			document.getElementById("add_profiles").innerHTML = delta + " Profile(s) added";
			document.getElementById("list_profiles").innerHTML = "<a href='javascript:gadgets.views.requestNavigateTo(\"canvas\");'>Review  &amp; export lis</a>";
		});
	}
	// ==============================================================
	
	// first argument is an array of data, 
    // second argument is the callback function to execute after updating the data
     
    function saveData(arrUnChunked, callback) {                  
	    // chunk up the copy into 400-element batches
	    var chunkedDataObject = {}; // a map of data, keyed by pIds + chunk num
	    
	    var chunkNum = 0;
	    while(arrUnChunked.length) {
	        var chunkName = 'pIDs' + chunkNum++;
	        chunkedDataObject[chunkName] = gadgets.json.stringify(arrUnChunked.splice(0, 40)); // chunked data as string as required by osapi.udpate call
	    }
	    chunkedDataObject["num_chunks"] = "" + chunkNum; // number of chunks as string as required by osapi.udpate call
	    
	    // at this point we should have a nice chunkedDataObject that we can convert to JSON and store as
	    // appdata in one call		
		
	    osapi.appdata.update({'userId': '@viewer', 'appId':'@app', 'data': gadgets.json.stringify(chunkedDataObject)}).execute(callback);
    }
	// ==============================================================
	
    function deleteList() {

		// get the number of chunks
		osapi.appdata.get({'userId':'@viewer', 'appId':'@app', 'fields':['num_chunks']} )
			.execute(function(result){
				
			var viewer = os.osapi.getViewerFromResult(result);

			var num_chunks = viewer.num_chunks;	
				
			// build the fields to read the chunks
			var fields = [];
			for (var i = 0; i < num_chunks; i++) {
				fields[i] = 'pIDs' + i;
			}
			// also delete the num_chunks field
			fields[num_chunks] = 'num_chunks';
			
			// see http://docs.jivesoftware.com/apireferences/javascriptapi/osapi.appdata.html
			// to understand why we call delete this odd way
			osapi.appdata['delete']({'userId':'@viewer', 'appId':'@app', 'fields': fields} )
				.execute(function(result){
				if (result.error) { 
					alert("Error " + result.error.code + " deleting application data: " + result.error.message);
				} else {
					document.getElementById("canvas_email_list_textarea").value = "";
					document.getElementById("canvas_full_list_textarea").value = "";
					document.getElementById("canvas_profile_list").innerHTML = "";
					document.getElementById("number_selected").innerHTML = "Select Profiles";
					toggleToolState("Off");
				}				
			}); /* end osapi.appdata.delete */
			
		}); /* end osapi.appdata.get */
    }    
	// ==============================================================	
	
	function dedupeArray(arrHasDupes) {
	
		var arrDeDuped = [];
		label:for(var i = 0; i < arrHasDupes.length;i++ ) {  
			for(var j = 0; j < arrDeDuped.length;j++ ) {
				if (arrDeDuped[j] == arrHasDupes[i]) 
				continue label;
			}
			arrDeDuped[arrDeDuped.length] = arrHasDupes[i];
		}
        return arrDeDuped;
	}
	// ==============================================================	

	function readPubSubIDsAndUpdateActions(sender, message) {						
		// extract the array of incoming person IDs
		g_arrPubSubIDs =  gadgets.json.parse(message).personIds;

		// merge the incoming and existing person ID arrays to throw out dupes for count purposes only
		var arrMergedIDs = g_arrOldIDs.concat(g_arrPubSubIDs );
		arrMergedIDs = dedupeArray(arrMergedIDs);	
		var newIDsCount = arrMergedIDs.length - g_arrOldIDs.length; 		
			
		if (newIDsCount > 0) {
			// we have new ID
			document.getElementById("add_profiles").innerHTML = "<a style='font-size:11px;' href='javascript:addProfilesToList();'>Add " + newIDsCount + " Profile(s) to list</a>";				
		} else {
			document.getElementById("add_profiles").innerHTML = "0 new Profile(s)";
		}
			
		if (g_arrOldIDs.length > 0) { 
			document.getElementById("list_profiles").innerHTML = "<a  href='javascript:gadgets.views.requestNavigateTo(\"canvas\");'>Review &amp; export list</a>";
		} else {
			document.getElementById("list_profiles").innerHTML = "Review &amp; export list";
		}
	}
	// ==============================================================
	
    function readData(callback) {

		// get the number of chunks
		osapi.appdata.get({'userId':'@viewer', 'appId':'@app', 'fields':['num_chunks']} )
			.execute(function(result){
				
			var viewer = os.osapi.getViewerFromResult(result);

			var num_chunks = viewer.num_chunks;	
				
			// build the fields to read the chunks
			var fields = [];
			for (var i = 0; i < num_chunks; i++) {
				fields[i] = 'pIDs' + i;
			}
			osapi.appdata.get({'userId':'@viewer', 'appId':'@app', 'fields': fields} )
				.execute(function(result){
				
				g_arrOldIDs = [];
				var viewer = os.osapi.getViewerFromResult(result);
				for (var i = 0; i < fields.length; i++) {
					var chunk = gadgets.json.parse(viewer[fields[i]]);
					g_arrOldIDs = g_arrOldIDs.concat(chunk);
				}
				// now that all the data is loaded, execute the callback
				callback();	
			}); /* end osapi.appdata.get INNER */
			
		}); /* end osapi.appdata.get OUTER */
    }
	// ==============================================================	
		
	function displayProfileList() {		
			var strTable="<table cellspacing='0' cellpadding='0' width='640'><tr>";
			
			// build the table header row
			strTable += "<td align='left' valign='top' class='tool_table_cell'>" + "<u><b>Name</b></u></td>";
			strTable += "<td align='left' valign='top' class='tool_table_cell'>" + "<u><b>Title</b></u></td>";
			strTable += "<td align='left' valign='top' class='tool_table_cell'>" + "<u><b>Email&nbsp;Address</b></u></td>";
			strTable += "</tr>";
		
  		for (i in g_arrOldIDs) {
        //strTable += "<tr id='" + g_arrOldIDs[i] + "'><div id='displayPerson_" + i + "'></div></tr>";
        strTable += "<tr id='" + g_arrOldIDs[i] + "'></tr>";
  		}		
			strTable += "</table>";
			
			// dispay the empty table in canvas view
			document.getElementById("canvas_profile_list").innerHTML = strTable;
			document.getElementById("number_selected").innerHTML = "Your list includes (" + g_arrOldIDs.length + ")" + " selected profiles";

  		// initialize the export divs
	  	document.getElementById("canvas_email_list_textarea").value = "";
		  document.getElementById("canvas_full_list_textarea").value = "";
      
      // load in patches of ten
      var batchSize = 10;
      var batch = osapi.newBatch();
      for (i = 0; i < g_arrOldIDs.length; i += batchSize) {
        var ids = '';
        for (j = 0; j < batchSize && i+j < g_arrOldIDs.length; j++) {
             ids += (j > 0 ? ',' : '') + g_arrOldIDs[i + j];             
        }
        // need key to be a string!
  		   batch.add('' + i, osapi.rdf.getRDF(ids));
      }
    		batch.execute(function(data) {
          var peopleData = [];
    			for (i in data) {
            var people = data[i].list;
            for (j = 0; j < people.length; j++) 
            {
              // put data we care about in peopleData with simple index
		          var base = people[j].base;
		          people[j] = jsonldHelper.getSubject(people[j]);
              peopleData[i+j] = {};
              peopleData[i+j].fullName = people[j].fullName;
              peopleData[i+j].preferredTitle = people[j].preferredTitle;
              peopleData[i+j].email = people[j].email;
            
              // put in div now so people can see progress
				      var table_row = "<td align='left' valign='top' class='tool_table_cell'>" + people[j].fullName + "</td>";
				      table_row += "<td align='left' valign='top' class='tool_table_cell'>" + people[j].preferredTitle + "</td>";
				      table_row += "<td align='left' valign='top' class='tool_table_cell email'>" + (people[j].email ? people[j].email : "") + "</td>";
            
              document.getElementById(base + people[j]['@id']).innerHTML = table_row;
            }
          }
            
          // add to export lists and show that we are done
          for (i in peopleData) {
             // add to the export areas
				     if (peopleData[i].email) {
					     document.getElementById("canvas_email_list_textarea").value += peopleData[i].email + ";";
				     }
				     document.getElementById("canvas_full_list_textarea").value += peopleData[i].fullName + ";";
				     document.getElementById("canvas_full_list_textarea").value += peopleData[i].preferredTitle + ";";
      			document.getElementById("canvas_full_list_textarea").value += (peopleData[i].email ? peopleData[i].email : "") + ";";              
          }
       		document.getElementById("progress").style.display="none";
        });
	} /* end displayProfileList */
	
	// ==============================================================		
		
	function copyEmailDivToClipboard() {
		
		document.getElementById("canvas_email_list").style.display = "block";
		document.getElementById("canvas_email_list_text").style.display = "block";
		document.getElementById("canvas_full_list").style.display = "none";
		document.getElementById("canvas_full_list_text").style.display = "none";
		document.getElementById("canvas_profile_list").style.display = "none";	
		toggleToolState("Off");
	}
	// ==============================================================		
		
	function copyFullDivToClipboard() {
		
		document.getElementById("canvas_full_list").style.display = "block";
		document.getElementById("canvas_full_list_text").style.display = "block";
		document.getElementById("canvas_email_list").style.display = "none";
		document.getElementById("canvas_email_list_text").style.display = "none";
		document.getElementById("canvas_profile_list").style.display = "none";
		toggleToolState("Off");
	}	
	// ==============================================================			
	
        function getNodeIdFromURI(uri) {
           if (typeof uri === 'string') { 
		   var c = uri.split('/');
		   return c[c.length-1];
	   }
	   else {
	       var retval = [];
               for ( i = 0; i < uri.length; i++) {
			retval[i] = getNodeIdFromURI(uri[i]);
	       } 
		return retval;
	   }
	}
	
				
	// ==============================================================				
	function showMessage(msg, isError) {
		$("div.message").html(msg);
		if(isError == true) {
			$("div.message").removeClass("info");	
			$("div.message").addClass("error");
		}
		else {
			$("div.message").removeClass("error");	
			$("div.message").addClass("info");
		}
		$("div.message").removeClass("hidden");	
	}
	// ==============================================================			
	function getUserList() {
		var items = [];
		$("div#canvas_profile_list tr").each( function(index, elem) {
			var id = $(elem).attr("id");
			if(id != null && id != "") {
				items.push(getNodeIdFromURI(id));
			}
		}); 
		
		return items.join(',');
		//return "5047417,4627047,5316354,5474533,4621800,5496561"
	}
	// ==============================================================			
	</script>]]>
  </Content>
  <Content type="html" view="small" preferred_width="134">
    <![CDATA[<!--HTML-->
    <!DOCTYPE html>
		
	<table id="button_and_help" cellspacing="6" cellpadding="5" style="display:none;">
		<tr>
			<td style="width:143px"><input id="state_button" type='button' class='tool_toggle_button' value='Create now!' onClick="gadgetEventTrack('on_off');toggleToolState('On');"></td>
			<td><img src="images/hovertiptarget.png" border="0" onClick="gadgetEventTrack('help');showHelp()"></td>
		</tr>
	</table>
	<table id="no_button_and_help" cellspacing="6" cellpadding="5" style="display:none;">
		<tr>
			<td class="tool_table_cell_small" style="width:95px">Add profiles to list</td>
			<td><img src="images/hovertiptarget.png" border="0" onClick="gadgetEventTrack('help');showHelp()"></td>
		</tr>
	</table>
<!--
        <div id="no_button_and_help" style="display:none;float:right;width:10px;padding:5px;">
                <img src="images/hovertiptarget.png" border="0" onClick="gadgetEventTrack('help');showHelp()">
        </div>
-->
	<table id="actions" style="display:none;clear:right;" cellspacing="2" cellpadding="0">
		<tr>
			<td class="tool_table_cell_small">&nbsp;1.&nbsp;</td>
			<td class="tool_table_cell_small"><span id="add_profiles" onClick="gadgetEventTrack('add_profiles')">
			0 new Profile(s)</span></td>
		</tr>
		<tr>
			<td class="tool_table_cell_small" valign="top" style="padding-top:4px">&nbsp;2.&nbsp;</td>
			<td class="tool_table_cell_small" valign="top" style="padding-top:4px"><span id="list_profiles" onClick="gadgetEventTrack('list_profiles')">Loading profiles...</span></td>
		</tr>
	</table>
	
	<script type="text/javascript">
		function init() {
			showToolVersion(false);
		}	
		
		gadgets.util.registerOnLoadHandler(init);
	</script>]]>
  </Content>
  <Content type="html" view="canvas" preferred_width="700">
    <![CDATA[<!--HTML-->
    <!DOCTYPE html>
   	<style type="text/css">
   		input#close {
   			margin-left:10px;
   		}
   		div.message {
   			margin-bottom:10px;
   		}
   		div.info {
   			color:green;
   		}
   		div.error {
   			color:red;
   		}
   		.hidden {
   			display:none;
   		}
     	        a, a:visited { color: #0088CC; text-decoration: none; }
    	        a:hover { color: #005580; text-decoration: underline; }
                p { width: 640px; }
  		
   	</style>
    
    <!-- top menu links -->
	<div style="width:640px;">
		<p id="number_selected" class="tool_title_orange" style="margin-left:20px;margin-top:20px\9;">
		Selected Profiles<p>
                <p id="canvas_help" style="padding-left:20px"></p>
		<p class="tool_body" style="margin-left:20px; margin-bottom:10px;">
			<div id="extended_functions" style="display:none;">
				<a href="javascript:gadgetEventTrack('export_email');copyEmailDivToClipboard();">Export email addresses only</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp; 
				<a href="javascript:gadgetEventTrack('export_all_data');copyFullDivToClipboard();">Export all data</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;
				<a href="" id="compose-email">Compose email to list</a><p>
			</div>
			<a href="javascript:gadgetEventTrack('delete_list');deleteList();" style="margin-left:20px;">Delete list</a>
		</p>
		
		<p id="progress" style="margin-left:20px;">
		<br><br>
		<img src="images/waiting.gif">
		<br><br>
		<b>This may take a minute or two, based on the size of your selected Profiles list.</b></p>
	</div>
	
	<div id="canvas_email_list" style="display:none; background:#FFF; width:670px; height:50px; margin-left:20px;">
	Copy and paste the email addresses below into an Excel spreadsheet or email client "To" field.
	<input type="button" style="height:22px; font-size:10; margin-left:40px; margin-top: 6px;" value="Close" onClick="document.getElementById('canvas_email_list').style.display='none';document.getElementById('canvas_email_list_text').style.display='none';document.getElementById('canvas_profile_list').style.display='block';"></button>
	</div>
	
	<!-- holds the email address list to be copied to the clipboard -->
	<div id="canvas_email_list_text" style="display:none; width:658px; height:450px; color:#000; margin:0px 5px 0px 5px;">
	<textarea id="canvas_email_list_textarea" rows="27" cols="78" style="border:1px solid #000; margin: 0px 8px 0px 8px;">
	</textarea>
	</div>
	
	<div id="canvas_full_list" style="display:none; background:#FFF; width:640px; height:50px; margin-left: 20px;">
	Copy and paste the profile data below into an Excel spreadsheet or external text editor.
	<input type="button" style="height:22px; font-size:10; margin-left:40px; margin-top: 6px;" value="Close" onClick="document.getElementById('canvas_full_list').style.display='none';document.getElementById('canvas_full_list_text').style.display='none';document.getElementById('canvas_profile_list').style.display='block';"></button>
	</div>
	
	<!-- holds the full profile list to be copied to the clipboard -->
	<div id="canvas_full_list_text" style="display:none; width:640px; height:450px; color:#000; margin:0px 5px 0px 5px;">
	<textarea id="canvas_full_list_textarea" rows="27" cols="78" style="border:1px solid #000; margin: 0px 8px 0px 8px;">
	</textarea>
	</div>	
	
	<!-- holds the visible profile details list -->
	<div id="canvas_profile_list" style="display:none; margin-left:20px; height:463px; height:443px\9; width: 660px; overflow:auto;"></div>
	
	<script type="text/javascript">
		function init() {
			// update UI
			showToolVersion(true);
			gadgets.window.adjustHeight(600);
			readData(displayProfileList);		
			document.getElementById("canvas_profile_list").style.display="block";
			
			$("#compose-email").click(function(event){
		        var emails = [];
		        var emailElem = $("td.email");
		        if(emailElem.size() > 50) {
		        	if(!confirm("Only the first 50 email addresses can be used. If your list has more, please use the Export function and paste them into email. Do you want to proceed?")) {
		        		event.preventDefault();
		        		return false;
		        	}
		        }	
		        
				emailElem.each(function(index, elem) {
					var email = $.trim($(elem).text());
					if(email != '') {
						emails.push(email);
					}
					if(emails.length >= 50) {
						return false;
					}
				});
				if(emails.length > 0) {
					$(this).attr("href", "mailto:" + emails.join(';'));
				}
			});
		}
		
		gadgets.util.registerOnLoadHandler(init);
	</script>]]>
  </Content>
</Module>